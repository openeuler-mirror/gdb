diff --git a/gdb/f-valprint.c b/gdb/f-valprint.c
--- a/gdb/f-valprint.c
+++ b/gdb/f-valprint.c
@@ -319,8 +319,22 @@ f_val_print (struct type *type, int embedded_offset,
 				      original_value, &opts, 0, stream);
 	}
       else
-	val_print_scalar_formatted (type, embedded_offset,
-				    original_value, options, 0, stream);
+	{
+	  val_print_scalar_formatted (type, embedded_offset,
+				      original_value, options, 0, stream);
+	  /* C and C++ has no single byte int type, char is used instead.
+	     Since we don't know whether the value is really intended to
+	     be used as an integer or a character, print the character
+	     equivalent as well.  */
+	  if (TYPE_LENGTH (type) == 1)
+	    {
+	      LONGEST c;
+
+	      fputs_filtered (" ", stream);
+	      c = unpack_long (type, valaddr + embedded_offset);
+	      LA_PRINT_CHAR ((unsigned char) c, type, stream);
+	    }
+	}
       break;
 
     case TYPE_CODE_STRUCT:
diff --git a/gdb/testsuite/gdb.fortran/printing-types.exp b/gdb/testsuite/gdb.fortran/printing-types.exp
--- a/gdb/testsuite/gdb.fortran/printing-types.exp
+++ b/gdb/testsuite/gdb.fortran/printing-types.exp
@@ -29,7 +29,7 @@ if {![runto MAIN__]} then {
 gdb_breakpoint [gdb_get_line_number "write"]
 gdb_continue_to_breakpoint "write"
 
-gdb_test "print oneByte"	" = 1"
+gdb_test "print oneByte"	" = 1 \'\\\\001\'"
 gdb_test "print twobytes"	" = 2"
 gdb_test "print chvalue"	" = \'a\'"
 gdb_test "print logvalue"	" = \.TRUE\."
